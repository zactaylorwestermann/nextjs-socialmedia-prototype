// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid()) 
  email String @unique
  username String @unique
  clerkId String @unique //Clerk
  name String? //optional data
  bio String?
  image String?
  location String?
  website String?
  createdAt DateTime @default(now()) //time user account created
  updatedAt DateTime @updatedAt //user account updated time

  // relations:
  posts Post[] //one to many
  comments Comment[] // one to many
  likes Like[] // one to many

  followers Follows[] @relation("following") // users who follow this user
  following Follows[] @relation("follower") // users this user follows

  notifications Notification[] @relation("userNotifications") // notifications received by user
  notificationsCreated Notification[] @relation("notificationCreator") // notifications triggered by a user
}

model Post{
  id String @id @default(cuid())
  authorId String
  content String?
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  author User @relation(fields: [authorId],references: [id], onDelete: Cascade) // cascade delete means delete all posts if author is deleted
  comments Comment[]
  likes Like[]
  notifications Notification[]
}

model Comment {
  id String @id @default(cuid())
  content String
  authorId String
  postId String
  createdAt DateTime @default(now())

  // relations
  author User @relation(fields: [authorId],references: [id],onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([authorId,postId]) // splits up the query allowing filtering of comments by these keys - composite index for faster queries
}

model Like {
  id String @id @default(cuid())
  postId String
  userId String
  createdAt DateTime @default(now())

  // relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId,postId]) // composite index for faster queries
  @@unique([userId,postId]) // prevents the same user liking a post twice
}

model Follows {
  followerId String
  followingId String
  createdAt DateTime @default(now())

  // relations
  follower User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@index([followerId,followingId]) // composite index for faster queries
  @@id([followerId, followingId]) // composite primary key prevents duplicate follows
}

model Notification {
  id String @id @default(cuid())
  userId String
  creatorId String
  type NotificationType
  read Boolean @default(false)
  postId String? // not all notification will have a post id e.g. follow noti
  commentId String? // not all notifications will have a post id e.g. follow
  createdAt DateTime @default(now())

  // relations
  user User @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator User @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}